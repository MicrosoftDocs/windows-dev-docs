### YamlMime:FAQ
metadata:
  description: The official Windows developer FAQ. Get answers to common questions about Windows application development and Windows App SDK.
  title: Windows developer FAQ
  ms.topic: faq
  ms.date: 04/04/2022
  ms.author: mikben
  author: matchamatch
  ms.localizationpriority: medium
  ms.collection: windows11
title: Windows developer FAQ
summary: 
  This article is meant to promote a common understanding of the Windows development experience and product direction. **The answers to these questions apply to Windows App SDK version 1.0.**
sections:
  - name: "Getting started"
    questions:
      - question: What should I use to build Windows apps?
        answer: |
          For Windows desktop application development, [Windows App SDK / WinUI 3](../winui/winui3/create-your-first-winui3-app.md) could be a great choice. This combination of technologies succeeds UWP / WinUI 2 for desktop apps. See the [Windows App SDK Roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md) to determine if Windows App SDK / WinUI 3 will meet your needs. 
          
          Other options may be more appropriate depending on what you’re building and how you’re building it:

          - **If Windows App SDK / WinUI 3 don’t meet your needs** based on the information provided within the [Windows App SDK Roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md), you can use UWP / WinUI 2.
          - **If you're targeting cross-platform:** [React Native](https://aka.ms/reactnative) and [.NET MAUI](/dotnet/maui/what-is-maui) let you build cross-platform apps. .NET MAUI is a great choice for C# developers. React Native will feel familiar to JavaScript/TypeScript developers.
          - **If you're a web developer:** You can use [WebView2](/microsoft-edge/webview2/) as an application host. This lets you use web technology to build desktop apps that can access the Windows SDK and Windows App SDK APIs. You can also use React Native for Windows.  
          - **If you're a C++ developer:** For desktop apps, Windows App SDK / WinUI 3 are a great choice. If you're building a game, consider using DirectX.  
          - **If you're a Rust developer:** Check out [Rust for Windows](/windows/dev-environment/rust/rust-for-windows).

          There are other development technologies that may be more appropriate depending on your needs and technology preferences. [Learn more about choosing a development technology](./index.md).
      - question: Where can I find a straightforward comparison of Windows development technologies?
        answer: |
          See [Select a development technology](./index.md).
  - name: Windows App SDK / WinUI 3
    questions:
      - question: What is the Windows App SDK?
        answer: |
          The Windows App SDK is a Windows application development platform that allows you to create beautiful, modern, backwards-compatible (down to Win10 1809) desktop apps. WinUI 3 is the UI framework that ships with Windows App SDK.
      - question: What's the difference between the Windows App SDK and the Windows SDK?
        answer: |
          Both are software development kits (SDKs) that let you build Windows apps.  

          The **Windows App SDK** is a new development platform that lets you build modern desktop apps that can be installed across Windows versions (down to Win10 1809). When you use Windows App SDK to build an app, you’ll have access to the latest Windows development platform features. The Windows App SDK includes WinUI 3.

          The **Windows SDK** is a development platform that lets you build UWP apps and Win32/desktop apps. It's designed around Windows APIs that are coupled to particular versions of the OS.  

          **The Windows App SDK doesn't replace the Windows SDK**. Instead, the Windows App SDK is a complement to the Windows SDK. It provides a convenient, OS-decoupled abstraction around the rich catalogue of Windows OS APIs that you can already access using the Windows SDK. When you build apps with Windows App SDK, you might end up using some Windows SDK APIs depending on the functionality that you need. Over time, more Windows SDK functionality will be lifted into the Windows App SDK.
      - question: Can I use Windows App SDK / WinUI 3 in my existing Windows app?
        answer: |
          Note that [WinUI 3](/windows/apps/winui/winui3/) (a UI framework) ships with [Windows App SDK](/windows/apps/windows-app-sdk/) (a Windows platform development framework).  

          Generally speaking, you can't use WinUI 3 unless you're ready to migrate your UI framework entirely. We’re working on a feature called XAML islands that allow you to host WinUI 3 content in other UI frameworks (WPF, Win32).

          You should be able to use elements of the Windows App SDK in any Win32/desktop app, depending on how your existing app was built. UWP apps are not supported by Windows App SDK / WinUI 3. 

          This means that **WPF/MFC/WinForms** apps can use Windows App SDK APIs that are not related to WinUI 3. Examples of such APIs include App Lifecycle, Windowing, and Toast Notifications.
      - question: Do I need to use Visual Studio to build WinUI 3 apps?
        answer: |
          We strongly recommend using Visual Studio 2022 versions 17.1 and above to develop Windows App SDK / WinUI 3 apps. Using the latest version of Visual Studio will give you access to rich development features like Hot Reload. 
 
          You may be able to use other IDEs and development workflows, but Visual Studio is currently the only officially supported IDE for Windows App SDK / WinUI 3. Note that MSBuild is required to compile projects that use XAML or Windows App SDK / WinUI 3.
#      - question: What limitations are there when building with WinUI 3 and Windows App SDK?
#        answer: |        
#          To learn about current limitations, see [Current Limitations of Windows App SDK / WinUI 3](current-limitations-appsdk-winui3.md).
      - question: When I build an app using Windows App SDK / WinUI 3, am I building a "WinUI 3 app"?
        answer: |
          Yes - "WinUI 3 app” is the term that we recommend you use.
      - question: Can I incrementally update my WinUI 2 app to WinUI 3 by gradually replacing WinUI 2 components with WinUI 3 components?
        answer: |
          No. Windows App SDK can't be used in UWP apps, and WinUI 2 can't be mixed with WinUI 3. See [About migrating from UWP to the Windows App SDK](/windows/apps/get-started/migrate-from-uwp-to-winappsdk).
      - question: How hard is it to migrate UWP apps to Windows App SDK / WinUI 3? 
        answer: |
          Migrating UI components will generally be straightforward. Otherwise, the cost of migrating from UWP to Windows App SDK / WinUI 3 will depend primarily on three considerations: 

           1. **Project file and MSBuild customization:** Migrating your project may require a significant level of effort, depending on whether you used advanced MSBuild features. 
           2. **.NET API migration:** If your UWP app relies on .NET, you'll need to upgrade to .NET 6. In most cases, adopting .NET 6 will be straightfoward.
           3. **UI component libraries:** If you use UI component libraries, you'll need new versions of them that target WinUI 3.

          See [About migrating from UWP to the Windows App SDK](/windows/apps/get-started/migrate-from-uwp-to-winappsdk) for more information about UWP migration. See the [Windows App SDK Roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md) for more information about upcoming features that may support your migration needs.
      - question: If I have an existing UWP app in the Store, can I publish a new packaged WinUI 3 app using the same identifiers?
        answer: |
          Yes, upgraded apps can be published without having to update your application's identity. Users who have the old version will get updated to the new version. This guidance applies only to desktop apps. Xbox, HoloLens, and Surface Hub apps can't migrate to WinUI 3 yet. 
      - question: How do I package/distribute my WinUI 3 app?
        answer: | 
           See [Deployment overview](/windows/apps/package-and-deploy/).
      - question: Where can I find Windows App SDK migration guidance?
        answer: |
          See [About migrating from UWP to the Windows App SDK](/windows/apps/get-started/migrate-from-uwp-to-winappsdk).
      - question: Do I need to use XAML markup if I want to use WinUI 3?
        answer: |
          No. UI controls can be created in code. But there are many benefits to representing your WinUI 3 UI in the form of declarative XAML markup, such as improved developer experience. 

          If you’re migrating from UWP/WPF to WinUI 3, you’ll probably be able to reuse a lot of your XAML markup and UI-related code (but you'll have to update some of the syntax).
      - question: Does Visual Studio have a design surface / GUI designer for WinUI 3?
        answer: |
         No. We recognize that this is a gap in the WinUI 3 developer experience. Tools like [XAML Hot Reload](/visualstudio/xaml-tools/xaml-hot-reload) can help in many scenarios. You can refer to our [public roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md) to see what we're currently prioritizing.
      - question: Does Windows App SDK include WinUI 3?
        answer: |
          Yes. WinUI 3 ships as a part of the Windows App SDK.
      - question: Does Windows App SDK include WinUI 2? 
        answer: |
          No. WinUI 2 is part of the UWP platform.
      - question: Are WinUI 2 and WinUI 3 built on the same technology?
        answer: |
          Not quite. Although WinUI 3 started from the WinUI 2 codebase, they are distinct technologies. Both WinUI 2 and WinUI 3 are XAML-based UI frameworks that work across .NET and C++. Note that WinUI 2 and WinUI 3 are not compatible with each other.
      - question: Can I use WinUI 3 without using Windows App SDK?
        answer: |
          No. WinUI 3 ships as part of the Windows App SDK.
      - question: Can I use WinUI 3 in unpackaged apps? 
        answer: | 
          Yes. All technologies in the Windows App SDK work in unpackaged apps, including WinUI 3.
      - question: What's the difference between XAML Islands and WinUI 3?
        answer: |
          XAML Islands allow you to host modern WinUI controls alongside existing Win32 UI from other frameworks, such as WinForms and WPF. 
          Today, XAML Islands are supported with _most_ system XAML and WinUI 2 controls. See [here](/windows/apps/desktop/modernize/xaml-islands) for more information. XAML Islands support for WinUI 3 controls is currently under development.
      - question: If I use WinUI 3, will my app look modern on both Windows 11 and Windows 10?
        answer: |
          Yes, your app's UI will inherit the latest Fluent UI design principles on all supported versions of Windows 11 and Windows 10 down to version 1809 in both packaged and unpackaged scenarios.
      - question: Can I use Mica (Windows 11) or Acrylic (Windows 10) backgrounds in apps built with Windows App SDK?
        answer: |
          Not yet. This is currently under development.
      - question: Where can I find WinUI 3 samples?
        answer: |
          See [Sample applications for Windows development](/windows/apps/get-started/samples#windows-sample-apps-repos). Some notable repositories:

          - [WindowsAppSDK-Samples](https://github.com/microsoft/WindowsAppSDK-Samples): Demonstrates how to use specific Windows App SDK API sets. 
          - [WinUI 3 Demos](https://github.com/microsoft/WinUI-3-Demos): Contains demos used during Microsoft's WinUI 3 presentations. 
          - [XAML Controls Gallery](https://github.com/Microsoft/Xaml-Controls-Gallery/tree/winui3): Showcases WinUI 3 and Windows App SDK. Note that this points to the `winui3` branch of the XAML Controls Gallery repository. Note also that the XAML Controls Gallery [is published to the Store](https://www.microsoft.com/p/xaml-controls-gallery/9msvh128x2zt).
  - name: UWP and WinUI 2
    questions:
      - question: Can UWP apps be distributed outside of the Microsoft Store?
        answer: |
          Yes. If your MSIX package is signed, the signing certificate must be valid and trusted on the target device.
      - question: Can I mix UWP UI controls with Win32, WPF, or WinForms UI controls?
        answer: |
          Yes - XAML Islands lets you do this. [Learn more about XAML Islands](/windows/apps/desktop/modernize/xaml-islands).
  - name: Cross-platform development
    questions:
      - question: Can I start with WinUI 3 and App SDK, and later integrate .NET MAUI if I eventually want to target cross-platform scenarios?
        answer: |
          Not at this time. Although .NET MAUI apps use Windows App SDK / WinUI 3 when running on Windows, we recommend starting with .NET MAUI or React Native for Windows if you anticipate the need to target multiple platforms.
      - question: What should I use if I want to build apps that work on Windows and Xbox?
        answer: |
          If your app needs to support Xbox, HoloLens, or IoT, we recommend using UWP. Windows App SDK doesn’t support these platforms. For game development, we recommend using [Microsoft Game Development Kit](https://github.com/microsoft/GDK).  
      - question: What should I use if I want to build apps that work on Windows and Surface Hub?
        answer: |
          If you're targeting both Windows and Surface hub, we recommend using UWP.
  - name: Packaging, deployment, and updates
    questions:
      - question: What's the difference between MSIX-packaged, unpackaged, and sparse-packaged apps?
        answer: |
          MSIX-packaged apps use MSIX to give users an easy installation, uninstallation, and update experience.  
          
          Unpackaged apps don't use MSIX - instead, they use a non-MSIX installer. 
          
          Sparse-packaging offers a hybrid between these two approaches. Sparse-packaged apps use MSIX to package, but they use a non-MSIX installer (like unpackaged apps) and they run with package identity (like packaged apps).  
          
          Each type of app can be published to the Microsoft Store, but we encourage you to MSIX-package your app to ensure that end-users enjoy a seamless installation and update experience.
      - question: Will my WinUI 3 app automatically update for end-users? 
        answer: |
          A Windows App SDK / WinUI 3 app can be delivered through the Store, an .appinstaller file, or in your existing MSI or setup.exe package. The Store and the AppInstaller support automatic updates for end-users who have automatic updating enabled, but your MSI/setup.exe app needs to have its own updater. 
      - question: Can I use Windows App SDK without using MSBuild?
        answer: |
          Generally speaking, no. WinUI 3 and Windows App SDK require MSBuild, which is why Visual Studio is a prerequisite to Windows App SDK / WinUI 3 application development. While It's technically possible to build Windows App SDK apps that don’t use WinUI 3 using other toolchains, this isn’t supported. 
  - name: Performance and optimization
    questions:
      - question: What can I do to make my Windows app feel great to end-users?
        answer: |
          See [Make apps great for Windows](/windows/apps/get-started/make-apps-great-for-windows).
  - name: Compatibility
    questions:
      - question: Will my users ever have to update Windows to use my Windows App SDK / WinUI 3 app?
        answer: |
          Users who have Windows 10, version 1809 and beyond will be able to install your WinUI 3 / Windows App SDK apps without updating their OS.
      - question: Can I target ARM64 with my WinUI 3 app?
        answer: |
          Yes.
  - name: Deprecations and migrations
    questions:
      - question: Are UWP / WinUI 2 deprecated?
        answer: |
          No. UWP and WinUI 2 are still supported and will receive bug, reliability, and security fixes. However, most new features and capabilities, including support for the latest .NET runtimes, will only be added to the Windows App SDK / WinUI 3. 
      - question: When should I migrate a UWP / WinUI 2 app to WinUI 3?
        answer: |
          UWP developers should feel no pressure to migrate their apps to the Windows App SDK, if they are happy with UWP and its feature set. The best choice for some apps may be to never migrate. 
          For apps that want to benefit from the latest Windows platform and .NET investments from Microsoft, these apps should consider moving to the Windows App SDK. 
          See [Migrate from UWP to the Windows App SDK](/windows/apps/windows-app-sdk/migrate-to-windows-app-sdk/migrate-to-windows-app-sdk-ovw)).
      - question: When should I *not* migrate a UWP + WinUI 2 app to WinUI 3?
        answer: |
          The [Windows App SDK Roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md) details upcoming features and what we're prioritizing. This will help you determine if the current or vNext version of Windows App SDK / WinUI 3 will meet your needs. We recommend continuing to use UWP if you're building for Xbox, Surface Hub, or Hololens.
      - question: Is WPF deprecated?
        answer: |
          No. WPF is still supported and receives some feature updates as well.
      - question: Is WinForms deprecated?
        answer: |
          No. WinForms is still supported and receives some feature updates as well.
      - question: Is the Windows Runtime (WinRT) deprecated?
        answer: |
          No. [WinRT](/windows/uwp/cpp-and-winrt-apis/) refers to a type of API. WinRT is the evolution of COM. Windows App SDK provides most of its functionality through WinRT APIs.
  - name: Release notes and roadmaps
    questions:
      - question: Where can I find release notes for Windows App SDK?
        answer: |
          See [Stable channel release notes](/windows/apps/windows-app-sdk/stable-channel) and [Preview channel release notes](/windows/apps/windows-app-sdk/preview-channel).
      - question: Where can I find a public roadmap for WinUI 3?
        answer: |
          Upcoming WinUI 3 features are documented in the [Windows App SDK roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md).
      - question: Where can I find a public roadmap for Windows App SDK?
        answer: |
          See [Windows App SDK roadmap](https://github.com/microsoft/WindowsAppSDK/blob/main/docs/roadmap.md).
      - question: Where can I find a roadmap for React Native Windows + Windows App SDK integration?
        answer: |
          React Native for Windows layers on top of the native WinUI stack. See [the React Native on Windows roadmap](https://aka.ms/rnw-roadmap).
additionalContent: |
  ## Related
  - [Windows developer glossary](windows-developer-glossary.md)
  - [Overview of app development options](/windows/apps/get-started#app-types)
