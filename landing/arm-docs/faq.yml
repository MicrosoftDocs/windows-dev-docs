### YamlMime:FAQ
metadata:
  title: Frequently asked questions about support for Windows on Arm.
  description: Frequently asked questions about support for Arm-based devices on Windows.
  ms.service: windows
  ms.subservice: arm
  ms.topic: faq
  author: mattwojo
  ms.author: mattwoj
  ms.reviewer: marcs
  ms.date: 01/12/2024
title: Frequently asked questions about Windows on Arm
summary: Use the following questions and answers to better understand the support for Arm-based devices running on Windows.


sections:
  - name: Windows on Arm FAQs
    questions:
      - question: |
          Do I need to create an Arm version of my Windows app?
        answer: |
          Arm-based devices are becoming increasingly popular. While Windows supports emulation for apps with an x64 or x86-based architecture, providing an Arm-native build of your Windows app will improve performance and give your customers the best experience when using an Arm-based device.

      - question: |
          Why update my app to Arm when x64 and x86 are both supported via emulation on Windows 11?
        answer: |
          While your customers will be able to use your x64 or x86-based app on their Arm device, there is performance overhead that comes with emulation. Treat your customers to an Arm-native version of your Windows apps for the best performance, responsiveness, and optimized battery life on their Arm device. 

      - question: |
          How do I add an Arm64 native configuration to my Windows app?
        answer: |
          See [Add Arm support to your Windows app](/windows/arm/add-arm-support).

      - question: |
          Are drivers supported by emulation? Or do I have to add Arm64 native support to any drivers used in my app?
        answer: |
          In all cases, kernel-mode drivers and user-mode print drivers MUST be built as native Arm64 binaries to work on Arm64 devices. Additionally, you cannot execute an x86 or x64 setup program to install an Arm64 driver on Arm64 devices. See [Building Arm64 Drivers with the WDK](/windows-hardware/drivers/develop/building-arm64-drivers).

      - question: |
          Does Visual Studio work on Arm?
        answer: |
          Both [Visual Studio](/visualstudio/install/visual-studio-on-arm-devices) and [Visual Studio Code](https://code.visualstudio.com/download) offer Arm-native versions for you to install.

      - question: |
          How do I test and debug on Arm64?
        answer: |
          See [Add Arm support to your Windows app - Test and Debug](/windows/arm/add-arm-support#step-2---test-and-debug-the-newly-built-arm64-app). For testing, you will need a Windows on Arm device, such as the [Windows Dev Kit 2023](/windows/arm/dev-kit/), or you can run a [Windows 11 Arm64 virtual machine](/windows/arm/add-arm-support#windows-on-arm-hardware-or-virtual-machines-available-for-testing).

      - question: |
          What if I am blocked from building an Arm-native version of my app by a 3rd party dependency?
        answer: |
          There are a few ways to address the scenario when your Windows app relies on a 3rd-party dependency that has not (yet) been updated for Arm. We first recommend reaching out to the owner of the dependency to ask whether there are plans to update the dependency to support Arm. You might also check resources like [NuGet](https://www.nuget.org/) or [vcpkg](https://vcpkg.io/en/), or reach out to the Arm Open Source community for help updating dependencies (such as [Linaro](https://www.linaro.org/windows-on-arm/)). You could rewrite the dependency yourself - Microsoft's "[App Assure program](https://www.microsoft.com/fasttrack/microsoft-365/app-assure)" may be able to help. Or you may want to write your app using [Arm64EC](/windows/arm/arm64ec), which enables you to mix x64 and Arm64 code for a partial Arm-native implementation focused on optimizing the most important aspects of your app for Arm.

      - question: |
          How do I update my C++ Windows app to support Arm devices?
        answer: |
          See [Configure C++ projects for Arm processors](/cpp/build/configuring-programs-for-arm-processors-visual-cpp).

      - question: |
          What Program Files folder should I use to install my ARM64 application?
        answer: |
          You may notice the following directories on your Windows device, used for installing and storing different application file types.
          
          * `C:\Program Files`: This directory is used for x64 applications, Arm64 applications, Arm64X applications. Learn more about how to [port your app to Arm64](./add-arm-support.md) or build [Arm64X binaries](./arm64x-build.md).

          * `C:\Program Files (x86)`: This directory is used for x86 applications. Learn more about [How x86 emulation works on Arm](./apps-on-arm-x86-emulation.md).

          * `C:\Program Files (Arm)`: This directory was used for 32-bit Arm applications, which are [no longer being supported in future versions of Windows](./arm32-to-arm64.md).

  - name: Windows on Arm Virtual Machine FAQ
    questions:
      - question: |
          How do I create a Windows 11 Arm64 Virtual Machine (VM)?
        answer: |
          For help on how to create and deploy Windows 11 Arm64 VMs with with Ampere Altra Armâ€“based processors on Azure, see [Quickstart: Create a Windows on Arm virtual machine in the Azure portal](./create-arm-vm.md).  You can also create an Windows on Arm VM locally with a Windows on Arm device using Hyper-V. 

      - question: |
          Can I host a Windows 11 virtual machine using Hyper-V on a Windows 11 Arm64 device?
        answer: |
          Yes, you can.  The easiest way to do so is to download the Windows 11 on Arm Insider Preview VHDX from [Windows Insider Preview Downloads](https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewARM64) and use it to create a VM.

      - question: |
          Are there any trainings available for adding Arm support to a Windows app and running a VM for testing and debugging?
        answer: |
          Yes, see [Introduction to Windows on Arm - Port a .NET application to natively support Arm-based processors](/training/modules/port-windows-applications-to-natively-support-arm/).
          
      - question: |
          Is CPU Sampling with the Windows Performance Recorder tool supported on ARM-based Hyper-V virtual machines?
        answer: |
          Yes, but the feature is currently only available in the [Windows Insider Preview](https://www.microsoft.com/windowsinsider/) Canary channel.  If you are willing to enroll your physical ARM device that is hosting your virtual machines in the Canary channel, CPU sampling will be supported in virtual machines; the feature is already supported on physical ARM devices. Sample usage: `wpr -start cpu`.
      

